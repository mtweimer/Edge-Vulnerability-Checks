# Vulnerability Check for CVE-2024-6387 - Checks based on the noted versions that may be vulnerable to CVE-2024-6387.  Noted that the original individuals who identified this vulnerability only have been successful exploiting against x86-based machines, however, theoretical and additional POC's may be developed for x64-based machines running vulnerable versions of OpenSSH.
# Reference: https://blog.qualys.com/vulnerabilities-threat-research/2024/07/01/regresshion-remote-unauthenticated-code-execution-vulnerability-in-openssh-server
# OpenSSH Versions Affected: 
# - OpenSSH versions earlier than 4.4p1 are vulnerable to this signal handler race condition unless they are patched for CVE-2006-5051 and CVE-2008-4109
# - OpenSSH versions from 4.4p1 up to, but not including, 8.5p1 are NOT VULNERABLE due to a transformative patch for CVE-2006-5051, which made a previously unsafe function secure
# - OpenSSH versions 8.5p1 up to, but not including, 9.8p1
# --> OpenSSH versions < 4.4p1, 8.5p1 - 9.7p1
# Author: Michael Weimer 

import argparse
import paramiko
import re

# Vulnerable versions
vulnerable_versions = {
    "before_4.4p1": lambda version: int(version.split('.')[0]) < 4 or (int(version.split('.')[0]) == 4 and int(version.split('.')[1].split('p')[0]) < 4),
    "4.4p1_to_8.5p1": lambda version: 4 <= int(version.split('.')[0]) < 8 or (int(version.split('.')[0]) == 8 and int(version.split('.')[1].split('p')[0]) < 5),
    "8.5p1_to_9.8p1": lambda version: 8 <= int(version.split('.')[0]) < 9 or (int(version.split('.')[0]) == 9 and int(version.split('.')[1].split('p')[0]) < 8)
}

def parse_version(banner):
    match = re.search(r'OpenSSH_(\d+\.\d+p\d+)', banner)
    if match:
        return match.group(1)
    else:
        # Attempt to handle versions with additional text
        match = re.search(r'OpenSSH_(\d+\.\d+)', banner)
        if match:
            version = match.group(1)
            if re.search(r'(\d+\.\d+p\d+)', banner):
                return re.search(r'(\d+\.\d+p\d+)', banner).group(1)
            else:
                return version + "p1"
    return None

def check_ssh_version(target_ip, target_port):
    try:
        transport = paramiko.Transport((target_ip, target_port))
        transport.start_client()
        banner = transport.remote_version
        transport.close()
        print(f"SSH Banner: {banner}")

        version = parse_version(banner)
        if version:
            print(f"Detected OpenSSH version: {version}")

            if vulnerable_versions["before_4.4p1"](version):
                print(f"Vulnerable version detected: {version} (before 4.4p1)")
                return True
            elif vulnerable_versions["4.4p1_to_8.5p1"](version):
                print(f"Non-vulnerable version detected: {version} (4.4p1 to 8.5p1)")
                return False
            elif vulnerable_versions["8.5p1_to_9.8p1"](version):
                print(f"Vulnerable version detected: {version} (8.5p1 to 9.8p1)")
                return True
            else:
                print("The version is not vulnerable.")
                return False
        else:
            print("Failed to detect OpenSSH version.")
            return False
    except Exception as e:
        print(f"Error connecting to {target_ip}:{target_port} - {e}")
        return False

def main(args):
    is_vulnerable = check_ssh_version(args.target_ip, args.target_port)
    if is_vulnerable:
        print("The target SSH server is vulnerable.")
    else:
        print("The target SSH server is not vulnerable.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check for vulnerable versions of OpenSSH (CVE-2006-5051, CVE-2008-4109).")
    parser.add_argument('--target-ip', '-t', dest='target_ip', help='Target IP', required=True)
    parser.add_argument('--target-port', '-p', dest='target_port', help='Target Port', type=int, default=22, required=False)

    args = parser.parse_args()
    main(args)
